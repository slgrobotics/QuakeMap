//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18052.
// 
#pragma warning disable 1591

namespace LibNet.LandmarkServer {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LandmarkServiceSoap", Namespace="http://terraserver-usa.com/LandmarkServer/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LandmarkBase))]
    public partial class LandmarkService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetLandmarkTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountOfLandmarkPointsByRectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLandmarkPointsByRectOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountOfLandmarkShapesByRectOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LandmarkService() {
            this.Url = "http://msrmaps.com/LandmarkService.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetLandmarkTypesCompletedEventHandler GetLandmarkTypesCompleted;
        
        /// <remarks/>
        public event CountOfLandmarkPointsByRectCompletedEventHandler CountOfLandmarkPointsByRectCompleted;
        
        /// <remarks/>
        public event GetLandmarkPointsByRectCompletedEventHandler GetLandmarkPointsByRectCompleted;
        
        /// <remarks/>
        public event CountOfLandmarkShapesByRectCompletedEventHandler CountOfLandmarkShapesByRectCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://terraserver-usa.com/LandmarkServer/GetLandmarkTypes", RequestNamespace="http://terraserver-usa.com/LandmarkServer/", ResponseNamespace="http://terraserver-usa.com/LandmarkServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public LandmarkType[] GetLandmarkTypes() {
            object[] results = this.Invoke("GetLandmarkTypes", new object[0]);
            return ((LandmarkType[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLandmarkTypes(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLandmarkTypes", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public LandmarkType[] EndGetLandmarkTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LandmarkType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLandmarkTypesAsync() {
            this.GetLandmarkTypesAsync(null);
        }
        
        /// <remarks/>
        public void GetLandmarkTypesAsync(object userState) {
            if ((this.GetLandmarkTypesOperationCompleted == null)) {
                this.GetLandmarkTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLandmarkTypesOperationCompleted);
            }
            this.InvokeAsync("GetLandmarkTypes", new object[0], this.GetLandmarkTypesOperationCompleted, userState);
        }
        
        private void OnGetLandmarkTypesOperationCompleted(object arg) {
            if ((this.GetLandmarkTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLandmarkTypesCompleted(this, new GetLandmarkTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://terraserver-usa.com/LandmarkServer/CountOfLandmarkPointsByRect", RequestNamespace="http://terraserver-usa.com/LandmarkServer/", ResponseNamespace="http://terraserver-usa.com/LandmarkServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CountOfLandmarkPointsByRect(BoundingRect rect, string[] types) {
            object[] results = this.Invoke("CountOfLandmarkPointsByRect", new object[] {
                        rect,
                        types});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCountOfLandmarkPointsByRect(BoundingRect rect, string[] types, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CountOfLandmarkPointsByRect", new object[] {
                        rect,
                        types}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCountOfLandmarkPointsByRect(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CountOfLandmarkPointsByRectAsync(BoundingRect rect, string[] types) {
            this.CountOfLandmarkPointsByRectAsync(rect, types, null);
        }
        
        /// <remarks/>
        public void CountOfLandmarkPointsByRectAsync(BoundingRect rect, string[] types, object userState) {
            if ((this.CountOfLandmarkPointsByRectOperationCompleted == null)) {
                this.CountOfLandmarkPointsByRectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountOfLandmarkPointsByRectOperationCompleted);
            }
            this.InvokeAsync("CountOfLandmarkPointsByRect", new object[] {
                        rect,
                        types}, this.CountOfLandmarkPointsByRectOperationCompleted, userState);
        }
        
        private void OnCountOfLandmarkPointsByRectOperationCompleted(object arg) {
            if ((this.CountOfLandmarkPointsByRectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountOfLandmarkPointsByRectCompleted(this, new CountOfLandmarkPointsByRectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://terraserver-usa.com/LandmarkServer/GetLandmarkPointsByRect", RequestNamespace="http://terraserver-usa.com/LandmarkServer/", ResponseNamespace="http://terraserver-usa.com/LandmarkServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LandmarkPoint[] GetLandmarkPointsByRect(BoundingRect rect, string[] types) {
            object[] results = this.Invoke("GetLandmarkPointsByRect", new object[] {
                        rect,
                        types});
            return ((LandmarkPoint[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLandmarkPointsByRect(BoundingRect rect, string[] types, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLandmarkPointsByRect", new object[] {
                        rect,
                        types}, callback, asyncState);
        }
        
        /// <remarks/>
        public LandmarkPoint[] EndGetLandmarkPointsByRect(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LandmarkPoint[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLandmarkPointsByRectAsync(BoundingRect rect, string[] types) {
            this.GetLandmarkPointsByRectAsync(rect, types, null);
        }
        
        /// <remarks/>
        public void GetLandmarkPointsByRectAsync(BoundingRect rect, string[] types, object userState) {
            if ((this.GetLandmarkPointsByRectOperationCompleted == null)) {
                this.GetLandmarkPointsByRectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLandmarkPointsByRectOperationCompleted);
            }
            this.InvokeAsync("GetLandmarkPointsByRect", new object[] {
                        rect,
                        types}, this.GetLandmarkPointsByRectOperationCompleted, userState);
        }
        
        private void OnGetLandmarkPointsByRectOperationCompleted(object arg) {
            if ((this.GetLandmarkPointsByRectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLandmarkPointsByRectCompleted(this, new GetLandmarkPointsByRectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://terraserver-usa.com/LandmarkServer/CountOfLandmarkShapesByRect", RequestNamespace="http://terraserver-usa.com/LandmarkServer/", ResponseNamespace="http://terraserver-usa.com/LandmarkServer/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CountOfLandmarkShapesByRect(BoundingRect rect, string[] types) {
            object[] results = this.Invoke("CountOfLandmarkShapesByRect", new object[] {
                        rect,
                        types});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCountOfLandmarkShapesByRect(BoundingRect rect, string[] types, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CountOfLandmarkShapesByRect", new object[] {
                        rect,
                        types}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCountOfLandmarkShapesByRect(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CountOfLandmarkShapesByRectAsync(BoundingRect rect, string[] types) {
            this.CountOfLandmarkShapesByRectAsync(rect, types, null);
        }
        
        /// <remarks/>
        public void CountOfLandmarkShapesByRectAsync(BoundingRect rect, string[] types, object userState) {
            if ((this.CountOfLandmarkShapesByRectOperationCompleted == null)) {
                this.CountOfLandmarkShapesByRectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountOfLandmarkShapesByRectOperationCompleted);
            }
            this.InvokeAsync("CountOfLandmarkShapesByRect", new object[] {
                        rect,
                        types}, this.CountOfLandmarkShapesByRectOperationCompleted, userState);
        }
        
        private void OnCountOfLandmarkShapesByRectOperationCompleted(object arg) {
            if ((this.CountOfLandmarkShapesByRectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountOfLandmarkShapesByRectCompleted(this, new CountOfLandmarkShapesByRectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://terraserver-usa.com/LandmarkServer/")]
    public partial class LandmarkType {
        
        private ShapeType shapeTypeField;
        
        private string typeField;
        
        /// <remarks/>
        public ShapeType ShapeType {
            get {
                return this.shapeTypeField;
            }
            set {
                this.shapeTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://terraserver-usa.com/LandmarkServer/")]
    public enum ShapeType {
        
        /// <remarks/>
        Null,
        
        /// <remarks/>
        Point,
        
        /// <remarks/>
        PolyLine,
        
        /// <remarks/>
        Polygon,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LandmarkPoint))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://terraserver-usa.com/LandmarkServer/")]
    public partial class LandmarkBase {
        
        private string typeField;
        
        private string nameField;
        
        private string fipsCodeField;
        
        private string typeDescriptionField;
        
        private ShapeType shapeTypeField;
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string FipsCode {
            get {
                return this.fipsCodeField;
            }
            set {
                this.fipsCodeField = value;
            }
        }
        
        /// <remarks/>
        public string TypeDescription {
            get {
                return this.typeDescriptionField;
            }
            set {
                this.typeDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public ShapeType ShapeType {
            get {
                return this.shapeTypeField;
            }
            set {
                this.shapeTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://terraserver-usa.com/LandmarkServer/")]
    public partial class LandmarkPoint : LandmarkBase {
        
        private LonLatPt pointField;
        
        /// <remarks/>
        public LonLatPt Point {
            get {
                return this.pointField;
            }
            set {
                this.pointField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://terraserver-usa.com/LandmarkServer/")]
    public partial class LonLatPt {
        
        private double lonField;
        
        private double latField;
        
        /// <remarks/>
        public double Lon {
            get {
                return this.lonField;
            }
            set {
                this.lonField = value;
            }
        }
        
        /// <remarks/>
        public double Lat {
            get {
                return this.latField;
            }
            set {
                this.latField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://terraserver-usa.com/LandmarkServer/")]
    public partial class BoundingRect {
        
        private LonLatPt upperLeftField;
        
        private LonLatPt lowerRightField;
        
        /// <remarks/>
        public LonLatPt UpperLeft {
            get {
                return this.upperLeftField;
            }
            set {
                this.upperLeftField = value;
            }
        }
        
        /// <remarks/>
        public LonLatPt LowerRight {
            get {
                return this.lowerRightField;
            }
            set {
                this.lowerRightField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetLandmarkTypesCompletedEventHandler(object sender, GetLandmarkTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLandmarkTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLandmarkTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LandmarkType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LandmarkType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CountOfLandmarkPointsByRectCompletedEventHandler(object sender, CountOfLandmarkPointsByRectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CountOfLandmarkPointsByRectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CountOfLandmarkPointsByRectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetLandmarkPointsByRectCompletedEventHandler(object sender, GetLandmarkPointsByRectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLandmarkPointsByRectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLandmarkPointsByRectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LandmarkPoint[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LandmarkPoint[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CountOfLandmarkShapesByRectCompletedEventHandler(object sender, CountOfLandmarkShapesByRectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CountOfLandmarkShapesByRectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CountOfLandmarkShapesByRectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591